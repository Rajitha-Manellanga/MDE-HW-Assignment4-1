/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.bts.bTS.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.bts.bTS.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BTSFactoryImpl extends EFactoryImpl implements BTSFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BTSFactory init()
  {
    try
    {
      BTSFactory theBTSFactory = (BTSFactory)EPackage.Registry.INSTANCE.getEFactory(BTSPackage.eNS_URI);
      if (theBTSFactory != null)
      {
        return theBTSFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BTSFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BTSFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BTSPackage.BTS: return createBTS();
      case BTSPackage.TYPE: return createType();
      case BTSPackage.BAGGAGE: return createBaggage();
      case BTSPackage.BOOKING: return createBooking();
      case BTSPackage.TICKET: return createTicket();
      case BTSPackage.PASSENGER: return createPassenger();
      case BTSPackage.PAYMENT: return createPayment();
      case BTSPackage.ONLINE_PAYMENT: return createOnlinePayment();
      case BTSPackage.KIOSK: return createKIOSK();
      case BTSPackage.BUS: return createBus();
      case BTSPackage.CITY: return createCity();
      case BTSPackage.SEAT: return createSeat();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BTSPackage.POINT:
        return createPointFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case BTSPackage.POINT:
        return convertPointToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTS createBTS()
  {
    BTSImpl bts = new BTSImpl();
    return bts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Baggage createBaggage()
  {
    BaggageImpl baggage = new BaggageImpl();
    return baggage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Booking createBooking()
  {
    BookingImpl booking = new BookingImpl();
    return booking;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ticket createTicket()
  {
    TicketImpl ticket = new TicketImpl();
    return ticket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Passenger createPassenger()
  {
    PassengerImpl passenger = new PassengerImpl();
    return passenger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Payment createPayment()
  {
    PaymentImpl payment = new PaymentImpl();
    return payment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlinePayment createOnlinePayment()
  {
    OnlinePaymentImpl onlinePayment = new OnlinePaymentImpl();
    return onlinePayment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KIOSK createKIOSK()
  {
    KIOSKImpl kiosk = new KIOSKImpl();
    return kiosk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bus createBus()
  {
    BusImpl bus = new BusImpl();
    return bus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public City createCity()
  {
    CityImpl city = new CityImpl();
    return city;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Seat createSeat()
  {
    SeatImpl seat = new SeatImpl();
    return seat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Point createPointFromString(EDataType eDataType, String initialValue)
  {
    Point result = Point.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPointToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTSPackage getBTSPackage()
  {
    return (BTSPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BTSPackage getPackage()
  {
    return BTSPackage.eINSTANCE;
  }

} //BTSFactoryImpl
