/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.bts.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BTSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BTSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.BTS");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//BTS:
		//    (elements+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(elements+=Type)*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSeatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPassengerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTicketParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBookingParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBaggageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPaymentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOnlinePaymentParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cKIOSKParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Type:
		//    City | Seat | Bus | Passenger | Ticket | Booking | Baggage | Payment | OnlinePayment | KIOSK;
		@Override public ParserRule getRule() { return rule; }
		
		//City | Seat | Bus | Passenger | Ticket | Booking | Baggage | Payment | OnlinePayment | KIOSK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//City
		public RuleCall getCityParserRuleCall_0() { return cCityParserRuleCall_0; }
		
		//Seat
		public RuleCall getSeatParserRuleCall_1() { return cSeatParserRuleCall_1; }
		
		//Bus
		public RuleCall getBusParserRuleCall_2() { return cBusParserRuleCall_2; }
		
		//Passenger
		public RuleCall getPassengerParserRuleCall_3() { return cPassengerParserRuleCall_3; }
		
		//Ticket
		public RuleCall getTicketParserRuleCall_4() { return cTicketParserRuleCall_4; }
		
		//Booking
		public RuleCall getBookingParserRuleCall_5() { return cBookingParserRuleCall_5; }
		
		//Baggage
		public RuleCall getBaggageParserRuleCall_6() { return cBaggageParserRuleCall_6; }
		
		//Payment
		public RuleCall getPaymentParserRuleCall_7() { return cPaymentParserRuleCall_7; }
		
		//OnlinePayment
		public RuleCall getOnlinePaymentParserRuleCall_8() { return cOnlinePaymentParserRuleCall_8; }
		
		//KIOSK
		public RuleCall getKIOSKParserRuleCall_9() { return cKIOSKParserRuleCall_9; }
	}
	public class BaggageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Baggage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaggageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Baggage:
		//    'Baggage'name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Baggage'name = ID
		public Group getGroup() { return cGroup; }
		
		//'Baggage'
		public Keyword getBaggageKeyword_0() { return cBaggageKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BookingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Booking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Booking:
		//    'Booking' name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Booking' name = ID
		public Group getGroup() { return cGroup; }
		
		//'Booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TicketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Ticket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTicketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Ticket:
		//    'Ticket' name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Ticket' name = ID
		public Group getGroup() { return cGroup; }
		
		//'Ticket'
		public Keyword getTicketKeyword_0() { return cTicketKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PassengerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Passenger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPassengerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Passenger:
		//    'Passenger' name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Passenger' name = ID
		public Group getGroup() { return cGroup; }
		
		//'Passenger'
		public Keyword getPassengerKeyword_0() { return cPassengerKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PaymentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Payment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPaymentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Payment:
		//    'Payment' name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Payment' name = ID
		public Group getGroup() { return cGroup; }
		
		//'Payment'
		public Keyword getPaymentKeyword_0() { return cPaymentKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class OnlinePaymentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.OnlinePayment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnlinePaymentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypePaymentCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypePaymentIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypePaymentCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OnlinePayment:
		//    'OnlinePayment' name = ID ('extends' superType=[Payment]) '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'OnlinePayment' name = ID ('extends' superType=[Payment]) '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'OnlinePayment'
		public Keyword getOnlinePaymentKeyword_0() { return cOnlinePaymentKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Payment])
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Payment]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Payment]
		public CrossReference getSuperTypePaymentCrossReference_2_1_0() { return cSuperTypePaymentCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypePaymentIDTerminalRuleCall_2_1_0_1() { return cSuperTypePaymentIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class KIOSKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.KIOSK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKIOSKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypePaymentCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypePaymentIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypePaymentCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//KIOSK:
		//    'KIOSK' name = ID  ('extends' superType=[Payment]) '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'KIOSK' name = ID  ('extends' superType=[Payment]) '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'KIOSK'
		public Keyword getKIOSKKeyword_0() { return cKIOSKKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Payment])
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Payment]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Payment]
		public CrossReference getSuperTypePaymentCrossReference_2_1_0() { return cSuperTypePaymentCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypePaymentIDTerminalRuleCall_2_1_0_1() { return cSuperTypePaymentIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Bus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Bus:
		//    'Bus' name=ID '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bus' name=ID '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Bus'
		public Keyword getBusKeyword_0() { return cBusKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.City");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBusstopsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBusstopsPointEnumRuleCall_3_0 = (RuleCall)cBusstopsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//City:
		//     'City' name = ID '{'
		//         busstops += Point*
		//     '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'City' name = ID '{'
		//    busstops += Point*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'City'
		public Keyword getCityKeyword_0() { return cCityKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//busstops += Point*
		public Assignment getBusstopsAssignment_3() { return cBusstopsAssignment_3; }
		
		//Point
		public RuleCall getBusstopsPointEnumRuleCall_3_0() { return cBusstopsPointEnumRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Seat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Seat:
		//    'Seat' name = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Seat' name = ID
		public Group getGroup() { return cGroup; }
		
		//'Seat'
		public Keyword getSeatKeyword_0() { return cSeatKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	public class PointElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.bts.BTS.Point");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cARRIVAL_POINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cARRIVAL_POINTARRIVAL_POINTKeyword_0_0 = (Keyword)cARRIVAL_POINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEPARTURE_POINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEPARTURE_POINTDEPARTURE_POINTKeyword_1_0 = (Keyword)cDEPARTURE_POINTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Point:
		//    ARRIVAL_POINT|DEPARTURE_POINT;
		public EnumRule getRule() { return rule; }
		
		//ARRIVAL_POINT|DEPARTURE_POINT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ARRIVAL_POINT
		public EnumLiteralDeclaration getARRIVAL_POINTEnumLiteralDeclaration_0() { return cARRIVAL_POINTEnumLiteralDeclaration_0; }
		
		public Keyword getARRIVAL_POINTARRIVAL_POINTKeyword_0_0() { return cARRIVAL_POINTARRIVAL_POINTKeyword_0_0; }
		
		//DEPARTURE_POINT
		public EnumLiteralDeclaration getDEPARTURE_POINTEnumLiteralDeclaration_1() { return cDEPARTURE_POINTEnumLiteralDeclaration_1; }
		
		public Keyword getDEPARTURE_POINTDEPARTURE_POINTKeyword_1_0() { return cDEPARTURE_POINTDEPARTURE_POINTKeyword_1_0; }
	}
	
	private final BTSElements pBTS;
	private final TypeElements pType;
	private final BaggageElements pBaggage;
	private final BookingElements pBooking;
	private final TicketElements pTicket;
	private final PassengerElements pPassenger;
	private final PaymentElements pPayment;
	private final OnlinePaymentElements pOnlinePayment;
	private final KIOSKElements pKIOSK;
	private final BusElements pBus;
	private final CityElements pCity;
	private final PointElements ePoint;
	private final SeatElements pSeat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BTSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBTS = new BTSElements();
		this.pType = new TypeElements();
		this.pBaggage = new BaggageElements();
		this.pBooking = new BookingElements();
		this.pTicket = new TicketElements();
		this.pPassenger = new PassengerElements();
		this.pPayment = new PaymentElements();
		this.pOnlinePayment = new OnlinePaymentElements();
		this.pKIOSK = new KIOSKElements();
		this.pBus = new BusElements();
		this.pCity = new CityElements();
		this.ePoint = new PointElements();
		this.pSeat = new SeatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.bts.BTS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BTS:
	//    (elements+=Type)*;
	public BTSElements getBTSAccess() {
		return pBTS;
	}
	
	public ParserRule getBTSRule() {
		return getBTSAccess().getRule();
	}
	
	//Type:
	//    City | Seat | Bus | Passenger | Ticket | Booking | Baggage | Payment | OnlinePayment | KIOSK;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Baggage:
	//    'Baggage'name = ID
	//;
	public BaggageElements getBaggageAccess() {
		return pBaggage;
	}
	
	public ParserRule getBaggageRule() {
		return getBaggageAccess().getRule();
	}
	
	//Booking:
	//    'Booking' name = ID
	//;
	public BookingElements getBookingAccess() {
		return pBooking;
	}
	
	public ParserRule getBookingRule() {
		return getBookingAccess().getRule();
	}
	
	//Ticket:
	//    'Ticket' name = ID
	//;
	public TicketElements getTicketAccess() {
		return pTicket;
	}
	
	public ParserRule getTicketRule() {
		return getTicketAccess().getRule();
	}
	
	//Passenger:
	//    'Passenger' name = ID
	//;
	public PassengerElements getPassengerAccess() {
		return pPassenger;
	}
	
	public ParserRule getPassengerRule() {
		return getPassengerAccess().getRule();
	}
	
	//Payment:
	//    'Payment' name = ID
	//;
	public PaymentElements getPaymentAccess() {
		return pPayment;
	}
	
	public ParserRule getPaymentRule() {
		return getPaymentAccess().getRule();
	}
	
	//OnlinePayment:
	//    'OnlinePayment' name = ID ('extends' superType=[Payment]) '{'
	//    '}'
	//;
	public OnlinePaymentElements getOnlinePaymentAccess() {
		return pOnlinePayment;
	}
	
	public ParserRule getOnlinePaymentRule() {
		return getOnlinePaymentAccess().getRule();
	}
	
	//KIOSK:
	//    'KIOSK' name = ID  ('extends' superType=[Payment]) '{'
	//    '}'
	//;
	public KIOSKElements getKIOSKAccess() {
		return pKIOSK;
	}
	
	public ParserRule getKIOSKRule() {
		return getKIOSKAccess().getRule();
	}
	
	//Bus:
	//    'Bus' name=ID '{'
	//    '}'
	//;
	public BusElements getBusAccess() {
		return pBus;
	}
	
	public ParserRule getBusRule() {
		return getBusAccess().getRule();
	}
	
	//City:
	//     'City' name = ID '{'
	//         busstops += Point*
	//     '}'
	//;
	public CityElements getCityAccess() {
		return pCity;
	}
	
	public ParserRule getCityRule() {
		return getCityAccess().getRule();
	}
	
	//enum Point:
	//    ARRIVAL_POINT|DEPARTURE_POINT;
	public PointElements getPointAccess() {
		return ePoint;
	}
	
	public EnumRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Seat:
	//    'Seat' name = ID;
	public SeatElements getSeatAccess() {
		return pSeat;
	}
	
	public ParserRule getSeatRule() {
		return getSeatAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
